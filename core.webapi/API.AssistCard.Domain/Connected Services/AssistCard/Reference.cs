//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AssistCard
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AssistCard.InterfaceIssuanceService")]
    public interface InterfaceIssuanceService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceIssuanceService/CompararCoberturas", ReplyAction="http://tempuri.org/InterfaceIssuanceService/CompararCoberturasResponse")]
        System.Threading.Tasks.Task<string> CompararCoberturasAsync(string usuarioCliente, string senhaCliente, int codigoAgencia, string xmlRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceIssuanceService/EmissaoVouchers", ReplyAction="http://tempuri.org/InterfaceIssuanceService/EmissaoVouchersResponse")]
        System.Threading.Tasks.Task<string> EmissaoVouchersAsync(string usuarioCliente, string senhaCliente, int codigoAgencia, string xmlRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceIssuanceService/CotacaoProdutos", ReplyAction="http://tempuri.org/InterfaceIssuanceService/CotacaoProdutosResponse")]
        System.Threading.Tasks.Task<string> CotacaoProdutosAsync(string usuarioCliente, string senhaCliente, int codigoAgencia, string xmlRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceIssuanceService/CotacaoUpgradesProduto", ReplyAction="http://tempuri.org/InterfaceIssuanceService/CotacaoUpgradesProdutoResponse")]
        System.Threading.Tasks.Task<string> CotacaoUpgradesProdutoAsync(string usuarioCliente, string senhaCliente, int codigoAgencia, string xmlRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceIssuanceService/ConsultaVouchers", ReplyAction="http://tempuri.org/InterfaceIssuanceService/ConsultaVouchersResponse")]
        System.Threading.Tasks.Task<string> ConsultaVouchersAsync(string usuarioCliente, string senhaCliente, int codigoAgencia, string xmlRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceIssuanceService/CancelarVoucher", ReplyAction="http://tempuri.org/InterfaceIssuanceService/CancelarVoucherResponse")]
        System.Threading.Tasks.Task<string> CancelarVoucherAsync(string usuarioCliente, string senhaCliente, int codigoAgencia, string xmlRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceIssuanceService/ConsultaCoberturas", ReplyAction="http://tempuri.org/InterfaceIssuanceService/ConsultaCoberturasResponse")]
        System.Threading.Tasks.Task<string> ConsultaCoberturasAsync(string usuarioCliente, string senhaCliente, int codigoAgencia, string xmlRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceIssuanceService/ConsultaComprovantes", ReplyAction="http://tempuri.org/InterfaceIssuanceService/ConsultaComprovantesResponse")]
        System.Threading.Tasks.Task<string> ConsultaComprovantesAsync(string usuarioCliente, string senhaCliente, int codigoAgencia, string xmlRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/InterfaceIssuanceService/CalcularParcelasCartao", ReplyAction="http://tempuri.org/InterfaceIssuanceService/CalcularParcelasCartaoResponse")]
        System.Threading.Tasks.Task<string> CalcularParcelasCartaoAsync(string usuarioCliente, string senhaCliente, int codigoAgencia, string xmlRequest);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public interface InterfaceIssuanceServiceChannel : AssistCard.InterfaceIssuanceService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public partial class InterfaceIssuanceServiceClient : System.ServiceModel.ClientBase<AssistCard.InterfaceIssuanceService>, AssistCard.InterfaceIssuanceService
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public InterfaceIssuanceServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(InterfaceIssuanceServiceClient.GetBindingForEndpoint(endpointConfiguration), InterfaceIssuanceServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InterfaceIssuanceServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(InterfaceIssuanceServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InterfaceIssuanceServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(InterfaceIssuanceServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public InterfaceIssuanceServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> CompararCoberturasAsync(string usuarioCliente, string senhaCliente, int codigoAgencia, string xmlRequest)
        {
            return base.Channel.CompararCoberturasAsync(usuarioCliente, senhaCliente, codigoAgencia, xmlRequest);
        }
        
        public System.Threading.Tasks.Task<string> EmissaoVouchersAsync(string usuarioCliente, string senhaCliente, int codigoAgencia, string xmlRequest)
        {
            return base.Channel.EmissaoVouchersAsync(usuarioCliente, senhaCliente, codigoAgencia, xmlRequest);
        }
        
        public System.Threading.Tasks.Task<string> CotacaoProdutosAsync(string usuarioCliente, string senhaCliente, int codigoAgencia, string xmlRequest)
        {
            return base.Channel.CotacaoProdutosAsync(usuarioCliente, senhaCliente, codigoAgencia, xmlRequest);
        }
        
        public System.Threading.Tasks.Task<string> CotacaoUpgradesProdutoAsync(string usuarioCliente, string senhaCliente, int codigoAgencia, string xmlRequest)
        {
            return base.Channel.CotacaoUpgradesProdutoAsync(usuarioCliente, senhaCliente, codigoAgencia, xmlRequest);
        }
        
        public System.Threading.Tasks.Task<string> ConsultaVouchersAsync(string usuarioCliente, string senhaCliente, int codigoAgencia, string xmlRequest)
        {
            return base.Channel.ConsultaVouchersAsync(usuarioCliente, senhaCliente, codigoAgencia, xmlRequest);
        }
        
        public System.Threading.Tasks.Task<string> CancelarVoucherAsync(string usuarioCliente, string senhaCliente, int codigoAgencia, string xmlRequest)
        {
            return base.Channel.CancelarVoucherAsync(usuarioCliente, senhaCliente, codigoAgencia, xmlRequest);
        }
        
        public System.Threading.Tasks.Task<string> ConsultaCoberturasAsync(string usuarioCliente, string senhaCliente, int codigoAgencia, string xmlRequest)
        {
            return base.Channel.ConsultaCoberturasAsync(usuarioCliente, senhaCliente, codigoAgencia, xmlRequest);
        }
        
        public System.Threading.Tasks.Task<string> ConsultaComprovantesAsync(string usuarioCliente, string senhaCliente, int codigoAgencia, string xmlRequest)
        {
            return base.Channel.ConsultaComprovantesAsync(usuarioCliente, senhaCliente, codigoAgencia, xmlRequest);
        }
        
        public System.Threading.Tasks.Task<string> CalcularParcelasCartaoAsync(string usuarioCliente, string senhaCliente, int codigoAgencia, string xmlRequest)
        {
            return base.Channel.CalcularParcelasCartaoAsync(usuarioCliente, senhaCliente, codigoAgencia, xmlRequest);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_InterfaceIssuanceService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpsBinding_InterfaceIssuanceService))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_InterfaceIssuanceService))
            {
                return new System.ServiceModel.EndpointAddress("http://wsbrasil.assistcard.com/IssuanceService.svc");
            }
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpsBinding_InterfaceIssuanceService))
            {
                return new System.ServiceModel.EndpointAddress("https://wsbrasil.assistcard.com/IssuanceService.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_InterfaceIssuanceService,
            
            BasicHttpsBinding_InterfaceIssuanceService,
        }
    }
}
